package transmart
import static us.monoid.web.Resty.content

import org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils
import org.springframework.security.core.authority.GrantedAuthorityImpl
import org.springframework.security.core.userdetails.UsernameNotFoundException

import us.monoid.json.JSONObject
import us.monoid.web.JSONResource
import us.monoid.web.Resty

import com.recomdata.security.AuthUserDetails

import edu.hms.transmart.security.AuthUser
import grails.util.Holders


class AuthorizationService {
	
	def userDetailsService

	private static final log = org.apache.commons.logging.LogFactory.getLog(this)

	public static boolean validateToken(String jwt_token) {
		log.debug("validateToken()")

		def resty = new Resty()
		
		JSONObject json = new JSONObject();
		try {
			// Validate token, by sending it to Auth0 and getting back a parsed JSONObject
			// with the corresponding user's information in it.
			// This only works if the JWT token was generated by Auth0!
			json.put("id_token", jwt_token)
			JSONResource tokenInfo = resty.json(String.format("https://%s%s",
					Holders.config.edu.harvard.transmart.auth0.domain, "/tokeninfo"), content(json));

			def currentUser = tokenInfo.toObject()
		} catch (Exception ex) {
			log.error("validateToken() Could not validate the JWT token with Auth0. "+ex.getMessage())
			throw new IllegalStateException("validateToken()Could not validate the JWT token with Auth0. "+ex.getMessage(), ex)
		}
		return true;
	}

	public static String getUsername(String jwt_token) {
		def resty = new Resty()
		JSONObject json = new JSONObject();
		try {
			log.info("getUsername() with token:"+jwt_token)
			json.put("id_token", jwt_token)
			
			JSONResource tokenInfo = resty.json(String.format("https://%s%s",
					Holders.config.edu.harvard.transmart.auth0.domain, "/tokeninfo"), content(json));

			def currentuser = tokenInfo.toObject()
			log.info("getUsername() CurrentUser:"+currentuser)
			
			return currentuser.email
		} catch (Exception ex) {
			log.error(this.class.toString()+" getUsername().ERROR: Could not authorize the user with Auth0 "+ex.getMessage())
			throw new IllegalStateException(" getUsername().Cannot get Token from Auth0", ex)
		}
	}
	
	public static AuthUser getByAuth0Token(String jwt_token) {
		
		def resty = new Resty()
		JSONObject json = new JSONObject();
		def someacct = null;
		try {
			json.put("id_token", jwt_token)
			JSONResource tokenInfo = resty.json(String.format("https://%s%s",
					Holders.config.edu.harvard.transmart.auth0.domain, "/tokeninfo"), content(json));

			def currentuser = tokenInfo.toObject()
			println "User_ID:"+(currentuser.user_id)
			
			
			//Class clazz = grailsApplication.getDomainClass(className).clazz
			//def findAThing = clazz.findByStuff(params.stuff)
			println "UserDomainClassName:"+SpringSecurityUtils.securityConfig.userLookup.userDomainClassName
			
			Class<?> User = Holders.grailsApplication.getDomainClass(SpringSecurityUtils.securityConfig.userLookup.userDomainClassName).clazz
			println this.class.toString()+" getByAuth0Token() SOMETHING:"+User
			
			someacct = AuthUser.findByUniqueId(currentuser.user_id)
			
			//User.withTransaction { status ->
				//someacct = User.findWhere('uniqueId': currentuser.user_id)
				
				
				
				
//				
//				
//				println this.class.toString()+" getByAuth0Token() MyUser:"+user+" Class:"user.class.toString()
//				if (!user) {
//					log.warn "User not found: $username"
//					println "ERROR: UNF"
//					throw new UsernameNotFoundException('User not found', username)
//				}
//	
//				def authorities = user.authorities.collect {new GrantedAuthorityImpl(it.authority)}
//				println this.class.toString()+" getByAuth0Token() Authorities are now:"+authorities
//				
//				someacct = new AuthUserDetails(
//						user.username,
//						user.passwd, user.enabled,
//						!user.accountExpired,
//						true,
//						!user.accountLocked,
//						authorities ?: NO_ROLES,
//						user.id,
//						user.userRealName,
//						user.passwordExpired)
			//}
		} catch (Exception ex) {
			println this.class.toString()+" getByAuth0Token() ERROR: Could not authorize the user with Auth0 "+ex.getMessage()
			throw new IllegalStateException("getUsername().Cannot get Token from Auth0", ex)
		}
		println this.class.toString()+" returning someacct "+someacct.username
		return someacct
	}
}
